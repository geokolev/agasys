// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	protos "github.com/jonsch318/royalafg/pkg/protos"
)

// UserServiceClient is an autogenerated mock type for the UserServiceClient type
type UserServiceClient struct {
	mock.Mock
}

// GetUserById provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetUserById(ctx context.Context, in *protos.GetUser, opts ...grpc.CallOption) (*protos.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *protos.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.GetUser, ...grpc.CallOption) (*protos.User, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.GetUser, ...grpc.CallOption) *protos.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.GetUser, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetUserByUsername(ctx context.Context, in *protos.GetUser, opts ...grpc.CallOption) (*protos.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *protos.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.GetUser, ...grpc.CallOption) (*protos.User, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.GetUser, ...grpc.CallOption) *protos.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.GetUser, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserStatus provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetUserStatus(ctx context.Context, in *protos.UserStatusRequest, opts ...grpc.CallOption) (*protos.UserStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *protos.UserStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.UserStatusRequest, ...grpc.CallOption) (*protos.UserStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.UserStatusRequest, ...grpc.CallOption) *protos.UserStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.UserStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.UserStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterGame provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) RegisterGame(ctx context.Context, in *protos.RegisterGameRequest, opts ...grpc.CallOption) (*protos.OnlineStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *protos.OnlineStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.RegisterGameRequest, ...grpc.CallOption) (*protos.OnlineStatus, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.RegisterGameRequest, ...grpc.CallOption) *protos.OnlineStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.OnlineStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.RegisterGameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) SaveUser(ctx context.Context, in *protos.User, opts ...grpc.CallOption) (*protos.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *protos.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.User, ...grpc.CallOption) (*protos.User, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.User, ...grpc.CallOption) *protos.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.User, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) UpdateUser(ctx context.Context, in *protos.User, opts ...grpc.CallOption) (*protos.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *protos.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.User, ...grpc.CallOption) (*protos.User, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.User, ...grpc.CallOption) *protos.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.User, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserServiceClient creates a new instance of UserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceClient {
	mock := &UserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
